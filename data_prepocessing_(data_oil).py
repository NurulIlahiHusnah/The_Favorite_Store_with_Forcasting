# -*- coding: utf-8 -*-
"""Data Prepocessing (data oil)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ja4_zS354CwRhY-3JNUkLNqmFKmQ4n4m
"""

from google.colab import drive
drive.mount('/content/drive')

import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
plt.style.use('fivethirtyeight')

from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error,mean_squared_error, mean_absolute_percentage_error
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN, Flatten
from tensorflow.keras.optimizers import Adam

holiday_events = pd.read_csv('/content/drive/MyDrive/Dataset/Oil/holidays_events.csv')
oil = pd.read_csv('/content/drive/MyDrive/Dataset/Oil/oil.csv')
store = pd.read_csv('/content/drive/MyDrive/Dataset/Oil/stores.csv')
test = pd.read_csv('/content/drive/MyDrive/Dataset/Oil/test.csv')
transaksi = pd.read_csv('/content/drive/MyDrive/Dataset/Oil/transactions.csv')
train =pd.read_csv('/content/drive/MyDrive/Dataset/Oil/train.csv')

"""### Tabel Holiday"""

# terdapat kolom tanggal, tipe libur, nama daerah, dan transfer
holiday_events.head()

# cross cek urutan tanggal
holiday_events.date.head(10)

holiday_events.isnull().sum()

holiday_events.info()
# type data date prlu diubah menjadi datetime

holiday_events.date= pd.to_datetime(holiday_events.date)
holiday_events.info()

"""### Tabel oil"""

# terdapat tanggal dan harga oli pada kolom (dcoilwtico)
# perlu rename kolom untuk mempermudah analisa
oil.rename(columns={'dcoilwtico': 'price_oil'},inplace=True)
oil.head()

print(oil.isnull().sum())
print(oil.info())

# Cross cek data kosong
oil[oil.isna().any(axis=1)]

oil.date = pd.to_datetime(oil.date)
oil.price_oil = oil.price_oil.fillna(method ='ffill') # untuk mengisi nilai null menggunakan data sebelumnya
oil.price_oil = oil.price_oil.fillna(method ='bfill') # untuk mengisi nilai null pada baris pertama dengan menggunakan data sesudahnya
oil.isnull().sum()

"""### Tabel Store"""

# terdapat kolom no toko, kota, negara, tipe dan cluster.
store.head()

store.info() # tidak terdapat nilai kosong

# cross cek type Store
store.type.value_counts()

"""### Tabel Transaksi"""

# terdapat kolom tanggal , no toko, dan jumlah transaksi
transaksi.head()

transaksi.info() # tidak terdapat nilai kosong
# mengubah type data kolom date

transaksi.date = pd.to_datetime(transaksi.date)
transaksi.info()

"""### Tabel test"""

# terdapat kolom id, tanggal, no toko, family dan promosi
test.head()

test.date = pd.to_datetime(test.date)
test.info()

"""### Tabel Train"""

# terdapat  kolom id, tanggal, no toko, family, penjualan dan promosi
train.head()

print(train.info())
print(train.isnull().sum())

train.date = pd.to_datetime(train.date)
train.info()

# melihat jumlah kolom train dan test
print('Train : ')
print(train.shape)
print('test : ')
print(test.shape)
print('oil : ')
print(oil.shape)
print('store : ')
print(store.shape)
print('transaksi : ')
print(transaksi.shape)
print('holiday events : ')
print(holiday_events.shape)

# melakukan join antara train dengan transaksi dan test dengan transaksi
train = pd.merge(train,transaksi,on=['date', 'store_nbr'], how='left')
test  = pd.merge(test,transaksi, on=['date', 'store_nbr'], how='left')

# maka dataset yang ada akan dijadikan 1 dataset
# train dan test akan di join terlebih dahulu dengan oil dan store
train = pd.merge(train, oil, on='date', how ='left')
test = pd.merge(test, oil, on='date', how='left')

train.head()

test.head()

# melakukan join train, test dengan dataset store
train = pd.merge(train, store, on='store_nbr', how='left')
test = pd.merge(test, store, on='store_nbr',how='left')

# melakukan join dengan dataset holiday dengan ketentuan tertentu
# melihat macam-macam tipe liburan
holiday_events['type'].value_counts()

holiday_events['transferred'].value_counts()

# memilih data yang memiliki tranferred true dengan event hari kerja
condition = (holiday_events.transferred == True ) | ( holiday_events.type == 'Work Day')

# memhapus baris yang tidak memenuhi kondisi diatas
spesial_day = holiday_events.drop(holiday_events[condition].index)

# menghapus kolom yang tidak diperlukan
spesial_day = spesial_day.drop(columns=['type','description','transferred'],axis= 1)
spesial_day['special days'] = 1 # memberi label
spesial_day
# data yang dihasilkan adalah data yang memiliki tanggal libur dan tidak terdapat pemindahan (transferred)

# menghapus baris yang memiliki tanggal yang sama pada tabel spesial day
spesial_day = spesial_day.drop(spesial_day[spesial_day.date.duplicated()].index)
spesial_day['locale'].unique() # melihat nilai unik pada kolom local

# memisahakan data berdasarkan locale
national = spesial_day[spesial_day.locale == 'National']
national

local = spesial_day[spesial_day.locale =='Local']
local

regional = spesial_day[spesial_day.locale == 'Regional']
regional

# melakukan pengabungan dari data locale ke train dan test
# Gabungkan train dan national
train_loc = pd.merge(train, national, on='date', how='left')

# Gabungkan train_loc dan regional
train_loc = pd.merge(train_loc, regional, on='date', how='left')

# Gabungkan train_loc dan local
train_loc = pd.merge(train_loc, local, on='date', how='left')
train_loc

# menghapus kolom locale dan locale_naame dari tabel national
national = national.drop(columns=['locale','locale_name'])
# Gabungkan train dan national
train = pd.merge(train, national, on='date', how='left')
train

# terdapat sebanyak 222750 baris yang mengadakan hari libur national.
train['special days'].value_counts()

test = pd.merge(test, national, on='date', how='left')
test

# pada dataset test tidak terdapat hari libur national
test['special days'].value_counts()

# regional holiday events -> train , test
for i, j in zip(regional.date, regional.locale_name): # dari i yang merupakan nilai dari tanggal pada tabel regional dan j nilai dari locale_name pada tabel regional
    train['special days'] [(train.date == i)& (train.state == j)] = 1 # jika kolom spesial days pada tabel train memiliki value kolom date sama dengan i dan kolom state sama dengan j maka bernilai 1.

for i, j in zip(regional.date, regional.locale_name):
    test['special days'] [(test.date == i)& (test.state == j)] = 1

# local_holiday_events -> train,test
for i, j  in zip( local.date, local.locale_name):
    train ['special days'][(train. date == i) & (train.city == j)] = 1

for i, j  in zip( local.date, local.locale_name):
    test ['special days'][(test. date == i) & (test.city == j)] = 1

# maka pada tabel train dan test sudah terdapat keterang dimana kolom spesial days = 1 artinya
# terjadi hari libur bertype national dan regional sedangkan yng bernilai 0 maka
# terjadi hari libur bertype local .

train.sample(5)

# melakukan cek missing value
train.isnull().sum()

test.isnull().sum()

data_kosong =train[['date','price_oil']]
data_kosong.sample(5)

# cross cek kolom price yang kosong
data_kosong[data_kosong.isna().any(axis=1)]

data_kosong.isnull().sum()

# melakukan imputasi pada kolom price_oil
train['price_oil'] = train['price_oil'].fillna(method='bfill') # bfill = mengisi nilai yang hilang dengan nilai dari baris berikutnya (backward)
test ['price_oil']= test['price_oil'].fillna(method='bfill')

# dikarenakan kolom spesial day merupakan kolom yang memiliki arti jika mengalami type libur national atau regional bernilai 1
# maka saya akan memberi nilai 0 dikarenakan tidak mengalami 2 type libur diatas
train['special days']= train['special days'].fillna(0)
test['special days']= test['special days'].fillna(0)

# melakukan pengabungan train dan test
df = pd.concat([train, test],ignore_index=True)
df.sample(5)

# cross cek data kosong
df.isnull().sum()

# melakukan imputasi
df['sales']= df['sales'].fillna(0)# karena dianggak tidak melakukan penjualan sama sekali pada waktu tertentu.

df = df.drop(columns='id',axis=1) # melakukan dropkolom id

df.set_index('date', inplace=True) # mengubah kolom date menjadi index

df.transactions = df.transactions.fillna(0) #dianggap tidak terjadi transaksi

df.shape # jumlah baris dan kolom yang dimiliki

df.head()

"""### Visualisasi"""

plt.figure(figsize=(8,6))
plt.title('Price Oil History')
plt.plot(df['price_oil'])
plt.xlabel('date', fontsize =14)
plt.ylabel('Price Oil USD ($)', fontsize=14)
plt.show()

plt.figure(figsize=(8,6))
plt.title('Transactions History')
plt.plot(df['transactions'])
plt.xlabel('date', fontsize =14)
plt.ylabel('transactions ', fontsize=14)
plt.show()

plt.figure(figsize=(8,6))
plt.title('Sales History')
plt.plot(df['sales'])
plt.xlabel('date', fontsize =14)
plt.ylabel('sales ', fontsize=14)
plt.show()

plt.figure(figsize=(8,6))
plt.title('Onpromotion History')
plt.plot(df['onpromotion'])
plt.xlabel('date', fontsize =14)
plt.ylabel('Onpromotion ($)', fontsize=14)
plt.show()

"""### Summary

- Pengamatan grafik harga minyak mengalami penurunan sangat signifikan di pertengahan tahun 2014 dan anjlok di tahun 2016 kemudian kembali stabil naik ke harga kisaran 40-50 USD per barel.

- Namun secara penjualan dari tahun 2013-2017 stabil di 2000. Pada tahun 2013-2015 setiap akhir tahun terjadi lonjakan harga namun tidak terlalu signifikan dikisaran 2200 - 4300 berbeda pada tahun 2016 terjadi beberapa kali lonjakan penjualan sangat signifikan mencapai 120000 namun kembali turun stabil di 2000.

- Pada tahun 2013 -2014  tidak diberlakukn promosi dimana harga pada saat itu terbilang tinggi, namun masuk pada pertengahan tahun 2014 sampai 2017 mulai diadakan promosi bertepatan dimana harga minyak mengalami koreksi besar- besaran.
"""

# save file ke format csv
df.to_csv('Data Oil.csv')